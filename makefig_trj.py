######
# makefig_trj.py
# make figure of sequcences of generated images generated by iterative application of generator G and F
#####

# %%

from parameters import exp_name, name_dataset, DIGITS_PAIR, set_random_seed
from util import TripletDataset, generate_images_loop
import model
from IPython.display import clear_output
import matplotlib.pyplot as plt
import time
import numpy as np
from tensorflow.keras import layers
import tensorflow as tf
import os
from re import A
os.environ['NVIDIA_TF32_OVERRIDE'] = '0'


set_random_seed()

# %%
# import tensorflow_datasets as tfds

physical_devices = tf.config.experimental.list_physical_devices('GPU')
if len(physical_devices) > 0:
    for k in range(len(physical_devices)):
        tf.config.experimental.set_memory_growth(physical_devices[k], True)
        print('memory growth:', tf.config.experimental.get_memory_growth(
            physical_devices[k]))
else:
    print("Not enough GPU hardware devices available")

AUTOTUNE = tf.data.AUTOTUNE

tf.config.experimental.enable_tensor_float_32_execution(
    False)
tf.keras.backend.set_floatx('float32')
mydtype = tf.float32
mynpdtype = np.float32

# exp_name = str(1000)+'EP_G_10_D_10_10_10'
BUFFER_SIZE = 1000
BATCH_SIZE = 100
TEST_BATCH_SIZE = 20
IMG_WIDTH = 28  # not used
IMG_HEIGHT = 28
LAMBDA = 10  # weight for consistency loss


bs = BATCH_SIZE
tbs = TEST_BATCH_SIZE
# %%

triplet_dataset = TripletDataset(
    DIGITS_PAIR, bs, tbs, name_dataset=name_dataset)
ds_train_x = triplet_dataset.ds_train_x
ds_train_y = triplet_dataset.ds_train_y
ds_train_z = triplet_dataset.ds_train_z

ds_test_x = triplet_dataset.ds_test_x
ds_test_y = triplet_dataset.ds_test_y
ds_test_z = triplet_dataset.ds_test_z


# %%

generator_g = model.make_generator_model()
generator_f = model.make_generator_model()

discriminator_x = model.make_discriminator_model_addDropout()
discriminator_y = model.make_discriminator_model_addDropout()
discriminator_z = model.make_discriminator_model_addDropout()


# %%


# Loss function

# optimizers
generator_g_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
generator_f_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)

discriminator_x_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
discriminator_y_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
discriminator_z_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)


# checkpoints
checkpoint_path = "./checkpoints/" + exp_name
ckpt = tf.train.Checkpoint(generator_g=generator_g,
                           generator_f=generator_f,
                           discriminator_x=discriminator_x,
                           discriminator_y=discriminator_y,
                           discriminator_z=discriminator_z,
                           generator_g_optimizer=generator_g_optimizer,
                           generator_f_optimizer=generator_f_optimizer,
                           discriminator_x_optimizer=discriminator_x_optimizer,
                           discriminator_y_optimizer=discriminator_y_optimizer,
                           discriminator_z_optimizer=discriminator_z_optimizer)

ckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)

# if a checkpoint exists, restore the latest checkpoint.

if ckpt_manager.latest_checkpoint:
    ckpt.restore(ckpt_manager.latest_checkpoint)
    print('Latest checkpoint restored!!')

# model.models_save_weights(checkpoint_path, 'weights-0', generator_g, generator_f, discriminator_x, discriminator_y, discriminator_z)


# %%


plt.rcParams['font.size'] = 18
plt.rcParams['font.family'] = 'Times New Roman'
plt.rcParams['mathtext.fontset'] = 'cm'
plt.rcParams['axes.linewidth'] = 1.0
plt.rcParams['lines.linewidth'] = 2.0
plt.rcParams['lines.markersize'] = 4
plt.rcParams['xtick.direction'] = 'in'
plt.rcParams['ytick.direction'] = 'in'
plt.rcParams['xtick.major.width'] = 1.0
plt.rcParams['ytick.major.width'] = 1.0
plt.rcParams['axes.labelsize'] = 22
plt.rcParams['legend.fontsize'] = 18


# dir name
fig_dir = './figures/' + exp_name
os.makedirs(fig_dir, exist_ok=True)

# %%
# generatorG
file_name_body = 'loop_g_x_' + exp_name
fig_g = generate_images_loop(generator_g, [
                             r'$x$', r'$G(x)$', r'$G^{2}(x)$', r'$G^{3}(x)$'], next(iter(ds_test_x)), n_row=10, loop=10)
fig_g.savefig(os.path.join(fig_dir, file_name_body+'.pdf'),
              bbox_inches='tight', pad_inches=0.05)
fig_g.savefig(os.path.join(fig_dir, file_name_body+'.png'),
              bbox_inches='tight', pad_inches=0.05, dpi=360)
fig_g.savefig(os.path.join(fig_dir, file_name_body+'.tiff'),
              bbox_inches='tight', pad_inches=0.05, dpi=360)


# generatorF
file_name_body = 'loop_f_x_' + exp_name
fig_f = generate_images_loop(generator_f, [
                             r'$x$', r'$F(x)$', r'$F^{2}(x)$', r'$F^{3}(x)$'], next(iter(ds_test_x)), n_row=10, loop=10)
fig_f.savefig(os.path.join(fig_dir, file_name_body+'.pdf'),
              bbox_inches='tight', pad_inches=0.05)
fig_f.savefig(os.path.join(fig_dir, file_name_body+'.png'),
              bbox_inches='tight', pad_inches=0.05, dpi=360)
fig_f.savefig(os.path.join(fig_dir, file_name_body+'.tiff'),
              bbox_inches='tight', pad_inches=0.05, dpi=360)


# %%
